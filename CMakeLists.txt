cmake_minimum_required(VERSION 3.1)
project(ogdf-user-example CXX)

set(CMAKE_CXX_FLAGS "-fpermissive -fPIC") # DEBUG, remove later

# OGDF
set(OGDF_DIR "ogdf")
find_package(OGDF REQUIRED CONFIG)
if(NOT OGDF_FOUND)
  message(FATAL_ERROR "No OGDF configuration for CMake has been found. "
    "Please set OGDF_CONFIG_SEARCH_PATH such that ogdf-config.cmake (generated by your OGDF build) can be found.")
endif()

# JNI
find_package(JNI REQUIRED)
include_directories(${JNI_INCLUDE_DIRS})

# TMAP
find_library(TMAP NAMES "tmap" PATHS "tmap/out/" REQUIRED)

message("${TMAP}")

# find_package(Python COMPONENTS Development) # TODO: warum brauche ich hier Python? Muss irgendwie weg


add_library(LayoutFromEdgeList_internal SHARED LayoutFromEdgeList_internal.cpp LayoutFromEdgeList_internal.hpp)
add_library(LayoutFromEdgeList_internal_JNI SHARED LayoutFromEdgeList_internal_JNI.cpp)

target_include_directories(LayoutFromEdgeList_internal PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(LayoutFromEdgeList_internal_JNI PUBLIC ${JNI_INCLUDE_DIRS})

target_include_directories(LayoutFromEdgeList_internal PUBLIC ${OGDF_INCLUDE_DIRS})
target_include_directories(LayoutFromEdgeList_internal PUBLIC "tmap/src/_tmap")

target_link_libraries(LayoutFromEdgeList_internal PUBLIC OGDF ${TMAP}) # wrapper mit OGDF + TMAP linken
target_link_libraries(LayoutFromEdgeList_internal_JNI PRIVATE LayoutFromEdgeList_internal)


add_executable(LayoutFromEdgeList_test test_cpp-endpoint.cpp)
# target_include_directories(LayoutFromEdgeList_test PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_link_libraries(LayoutFromEdgeList_test PRIVATE LayoutFromEdgeList_internal) # test linken
